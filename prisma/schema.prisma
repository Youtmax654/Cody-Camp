generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model messages {
  id         Int       @id @default(autoincrement())
  senderId   String    @db.Char(36)
  receiverId String    @db.Char(36)
  content    String    @db.LongText
  datetime   DateTime? @default(now()) @db.DateTime(0)

  @@index([receiverId], map: "receiverId_FK")
  @@index([senderId], map: "senderId_FK")
}

model users {
  id        String  @id @db.Char(36)
  firstName String  @db.Char(50)
  lastName  String  @db.Char(50)
  email     String  @unique(map: "email_UNIQUE") @db.VarChar(100)
  password  String  @db.VarChar(255)
  role      String  @default("Ã©tudiant") @db.VarChar(50)
  active    Boolean @default(false)
}

model announcement {
  id       Int       @id @default(autoincrement())
  senderId String    @db.Char(36)
  content  String    @db.LongText
  datetime DateTime? @default(now()) @db.DateTime(0)

  @@index([senderId], map: "senderId_FK")
}

model group_messages {
  id       Int       @id @default(autoincrement())
  senderId String    @db.Char(36)
  groupId  Int
  content  String    @db.LongText
  datetime DateTime? @default(now()) @db.DateTime(0)

  @@index([groupId], map: "groupId_FK")
  @@index([senderId], map: "senderId_FK")
}

model groups {
  id          Int    @id @default(autoincrement())
  name        String @db.Char(50)
  description String @db.LongText
}

model planning {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  startTime DateTime @db.Timestamp(0)
  endTime   DateTime @db.Timestamp(0)
  course    String   @db.Char(50)
  teacher   String   @db.Char(50)
  room      String   @db.Char(50)
  class     String   @db.Char(50)
}

model user_groups {
  id      Int    @id @default(autoincrement())
  userId  String @db.Char(36)
  groupId Int

  @@index([groupId], map: "groupId_FK")
  @@index([userId], map: "userId_FK")
}

model authtokens {
  id     String @id @db.VarChar(255)
  userId String @db.Char(36)

  @@index([userId], map: "userId_FK")
}
